// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sistema.Data;

namespace Sistema.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Sistema.Entidades.Articulos", b =>
                {
                    b.Property<int>("ArticuloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Contidad")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Costo")
                        .HasColumnType("money");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("Impuesto")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArticuloId")
                        .HasName("Articulos_pk");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("Sistema.Entidades.Clientes", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Cedula")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Celular")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Correo")
                        .HasColumnType("TEXT")
                        .IsUnicode(false);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .IsUnicode(false);

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Telefono")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClienteId")
                        .HasName("Clientes_pk");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Sistema.Entidades.Cotizaciones", b =>
                {
                    b.Property<int>("CotizacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<double?>("ImpuestoTotal")
                        .HasColumnType("REAL");

                    b.Property<int>("NumeroCotizacion")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CotizacionId")
                        .HasName("Cotizaciones_pk");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cotizaciones");
                });

            modelBuilder.Entity("Sistema.Entidades.CotizacionesDetalle", b =>
                {
                    b.Property<int>("ArticuloId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Contidad")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Costo")
                        .HasColumnType("TEXT");

                    b.Property<int>("CotizacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Impuesto")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("CotizacionId");

                    b.ToTable("CotizacionesDetalle");
                });

            modelBuilder.Entity("Sistema.Entidades.Facturas", b =>
                {
                    b.Property<int>("FacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("date");

                    b.Property<double?>("ImpuestoTotal")
                        .HasColumnType("REAL");

                    b.Property<int>("NumeroFactura")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FacturaId")
                        .HasName("Facturas_pk");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Sistema.Entidades.FacturasDetalle", b =>
                {
                    b.Property<int>("ArticuloId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Contidad")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Costo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<int>("FacturaId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Impuesto")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("FacturaId");

                    b.ToTable("FacturasDetalle");
                });

            modelBuilder.Entity("Sistema.Entidades.Pagos", b =>
                {
                    b.Property<int>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("TipoPago")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PagoId")
                        .HasName("Pagos_pk");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Sistema.Entidades.PagosDetalle", b =>
                {
                    b.Property<int>("FacturaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Monto")
                        .HasColumnType("money");

                    b.Property<int>("PagoId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("FacturaId");

                    b.HasIndex("PagoId");

                    b.ToTable("PagosDetalle");
                });

            modelBuilder.Entity("Sistema.Entidades.Usuarios", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UsuarioId")
                        .HasName("Usuarios_pk");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Sistema.Entidades.Articulos", b =>
                {
                    b.HasOne("Sistema.Entidades.Usuarios", "Usuario")
                        .WithMany("Articulos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("Articulos___fk___Usuarios")
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.Clientes", b =>
                {
                    b.HasOne("Sistema.Entidades.Usuarios", "Usuario")
                        .WithMany("Clientes")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("Clientes___fk__Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.Cotizaciones", b =>
                {
                    b.HasOne("Sistema.Entidades.Clientes", "Cliente")
                        .WithMany("Cotizaciones")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("Cotizaciones___fk___Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Entidades.Usuarios", "Usuario")
                        .WithMany("Cotizaciones")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("Cotizaciones___fk___Usuarios")
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.CotizacionesDetalle", b =>
                {
                    b.HasOne("Sistema.Entidades.Articulos", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .HasConstraintName("CotizacionDetalles___fk___Articulos")
                        .IsRequired();

                    b.HasOne("Sistema.Entidades.Cotizaciones", "Cotizacion")
                        .WithMany()
                        .HasForeignKey("CotizacionId")
                        .HasConstraintName("CotizacionDetalles___fk___Cotizaciones")
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.Facturas", b =>
                {
                    b.HasOne("Sistema.Entidades.Clientes", "Cliente")
                        .WithMany("Facturas")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("Facturas___fk___Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Entidades.Usuarios", "Usuario")
                        .WithMany("Facturas")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("Facturas___fk___Usuarios")
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.FacturasDetalle", b =>
                {
                    b.HasOne("Sistema.Entidades.Articulos", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .HasConstraintName("FacturaDetalles___fk__Articulos")
                        .IsRequired();

                    b.HasOne("Sistema.Entidades.Facturas", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId")
                        .HasConstraintName("FacturaDetalles___fk__Facturas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.Pagos", b =>
                {
                    b.HasOne("Sistema.Entidades.Clientes", "Cliente")
                        .WithMany("Pagos")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("Pagos___fk___Clientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Entidades.Usuarios", "Usuario")
                        .WithMany("Pagos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("Pagos___fk___Usuarios")
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Entidades.PagosDetalle", b =>
                {
                    b.HasOne("Sistema.Entidades.Facturas", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId")
                        .HasConstraintName("PagoDetalles___fk__Facturas")
                        .IsRequired();

                    b.HasOne("Sistema.Entidades.Pagos", "Pago")
                        .WithMany()
                        .HasForeignKey("PagoId")
                        .HasConstraintName("PagoDetalles___fk__Pagos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
